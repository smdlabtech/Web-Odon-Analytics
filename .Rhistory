install.packages("shiny")
install.packages("shinydashboard")
#-- Chargement des librairies
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "CBEPL Dashboard"),
dashboardSidebar(
menuItem("Menu Item 1"),
menuItem("Menu Item 2"),
menuItem("Menu Item 3")
),
dashboardBody()
)
)
#-- Chargement des librairies
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "CBEPL Dashboard"),
dashboardSidebar(
menuItem("Menu Item 1"),
menuItem("Menu Item 2"),
menuItem("Menu Item 3")
),
dashboardBody()
)
)
library(shiny)
library(shinydashboard)
library(shiny)
library(shinydashboard)
shinyserver(function(input, output, session) {
})
library(shiny)
library(shinydashboard)
shinyServer(function(input, output, session) {
})
#-- Chargement des librairies
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "CBEPL Dashboard"),
dashboardSidebar(
menuItem("Menu Item 1"),
menuItem("Menu Item 2"),
menuItem("Menu Item 3")
),
dashboardBody()
)
)
library(shinydashboard)
#-- Chargement des librairies
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "CBEPL Dashboard"),
dashboardSidebar(
menuItem("Menu Item 1"),
menuItem("Menu Item 2"),
menuItem("Menu Item 3")
),
dashboardBody()
)
)
library(shiny)
library(shinydashboard)
shinyServer(function(input, output, session) {
})
runApp('Shiny_Server.R')
library(shiny)
library(shinydashboard)
shinyServer(function(input, output, session) {
})
runApp()
library(shiny)
library(shinydashboard)
shinyServer(function(input, output, session) {
})
runApp()
runApp()
install.packages("tidyverse")
install.packages("elo")
runApp('C:/Users/mamad/Dropbox/Shiny_Rech')
runApp()
runApp('C:/Users/mamad/Dropbox/Shiny_Rech')
#-- Chargement des librairies pour la creation du tableau de bord
library(shiny)
library(tidyverse)
library(elo)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "CBEPL Dashboard"),
dashboardSidebar(
menuItem("Menu Item 1"),
menuSubItem("mon test"),
menuSubItem("ggag"),
menuItem("Menu Item 2"),
menuItem("Menu Item 3")
),
dashboardBody()
)
)
#Sortie Affichage a l'aide du Serveur
shinyApp(ui = ui, server = server)
runApp('shiny_test.R')
runApp('shiny_test.R')
runApp('shiny_test.R')
runApp('shiny_test.R')
install.packages("shinythemes")l
install.packages("shinythemes")
runApp('shiny_test.R')
runApp('C:/Users/mamad/Dropbox/Shiny_Rech/shiny_test.R')
shiny::runApp('Shiny_App')
# Chargement des libraries
library(lubridate)
library(fastICA)
library(dplyr)
# Sources de données
file1="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/OdonT1 812_2011-2017.csv"
file2="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/OdonT2 813_2011-2017.csv"
file4="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/OdonT4 815_2011-2017.csv"
file5="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/OdonT5 816_2011-2017.csv"
#I) Importations, Nettoyages et Validations des donnees
# Station OdonT1
OdonT1 <- read.csv2(file1,header = FALSE,encoding = 'UTF-8', sep = ",",stringsAsFactors = FALSE,na.strings = c(""," ","NA","N/A"))
attach(OdonT1)
OdonT1<-OdonT1[-1:-2,,]   #Suppression de lignes 1 et 2 dans les données
colnames(OdonT1)<-c("Indice","date","Heure","TempOd1")  #Renommer l'entête de la table
OdonT1
View(OdonT1)
install.packages("dplyr")
install.packages("dplyr")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("tidyverse*")
install.packages("tidyverse")
View(OdonT1)
shiny::runApp('Shiny_App')
## app.R ##
library(shiny)
library(shinydashboard)
library(tidyverse)
library(broom)
library(kableExtra)
install.packages("broom")
install.packages("kableExtra")
runApp('Shiny_App')
## app.R ##
library(shiny)
library(shinydashboard)
library(tidyverse)
library(broom)
library(kableExtra)
coffee_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
ui <- dashboardPage(
dashboardHeader(title = "Coffee Dashboard"),
dashboardSidebar(
selectInput("v_country", "Country", choices = coffee_ratings %>%
select(country_of_origin) %>%
distinct() %>%
arrange(country_of_origin) %>%
drop_na())
),
dashboardBody(
fluidRow(box(plotOutput("coffee_flavour")), box(plotOutput("coffee_variety"))),
fluidRow(box(plotOutput("coffee_dif")), box(tableOutput("coffee_table")))
)
)
## app.R ##
library(shiny)
library(shinydashboard)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse",require(0.3.5))
devtools::install_github("tidyverse/tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse", require("tidyverse3.5"))
install.packages("tidyverse", require("tidyverse.3.5"))
install.packages("tidyverse", require(version 3.5))
install.packages("tidyverse", require("version 3.5"))
install.packages("tidyverse", require("version 0.3.5"))
install.packages("tidyverse", require("R version 0.3.5"))
install.packages("tidyverse", require(R version 3.5.0))
install.packages(c("backports", "BH", "broom", "cachem", "callr", "caTools", "cli", "colorspace", "cowplot", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "digest", "distributional", "doParallel", "DT", "Epi", "fable", "fabletools", "FactoMineR", "Factoshiny", "fansi", "fastmap", "forcats", "foreach", "foreign", "generics", "ggplot2", "ggrepel", "ggsignif", "ggthemes", "glmnet", "greybox", "hms", "htmlwidgets", "httpuv", "isoband", "iterators", "jsonlite", "KFAS", "knitr", "labeling", "lamW", "lifecycle", "lme4", "lubridate", "magick", "MASS", "matrixStats", "mice", "mime", "missMDA", "mlbench", "MPV", "multcomp", "nnet", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgload", "PKI", "pracma", "processx", "progressr", "promises", "ps", "quantmod", "quantreg", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "Rdpack", "reprex", "rmarkdown", "robustbase", "rprojroot", "rstatix", "rstudioapi", "sampling", "shinyjqui", "smooth", "sp", "SparseM", "statmod", "svglite", "testthat", "tibble", "tinytex", "tseries", "tsibble", "vctrs", "withr", "xfun"))
install.packages(c("backports", "BH", "broom", "cachem", "callr", "caTools", "cli", "colorspace", "cowplot", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "digest", "distributional", "doParallel", "DT", "Epi", "fable", "fabletools", "FactoMineR", "Factoshiny", "fansi", "fastmap", "forcats", "foreach", "foreign", "generics", "ggplot2", "ggrepel", "ggsignif", "ggthemes", "glmnet", "greybox", "hms", "htmlwidgets", "httpuv", "isoband", "iterators", "jsonlite", "KFAS", "knitr", "labeling", "lamW", "lifecycle", "lme4", "lubridate", "magick", "MASS", "matrixStats", "mice", "mime", "missMDA", "mlbench", "MPV", "multcomp", "nnet", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgload", "PKI", "pracma", "processx", "progressr", "promises", "ps", "quantmod", "quantreg", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "Rdpack", "reprex", "rmarkdown", "robustbase", "rprojroot", "rstatix", "rstudioapi", "sampling", "shinyjqui", "smooth", "sp", "SparseM", "statmod", "svglite", "testthat", "tibble", "tinytex", "tseries", "tsibble", "vctrs", "withr", "xfun"))
install.packages(c("backports", "BH", "broom", "cachem", "callr", "caTools", "cli", "colorspace", "cowplot", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "digest", "distributional", "doParallel", "DT", "Epi", "fable", "fabletools", "FactoMineR", "Factoshiny", "fansi", "fastmap", "forcats", "foreach", "foreign", "generics", "ggplot2", "ggrepel", "ggsignif", "ggthemes", "glmnet", "greybox", "hms", "htmlwidgets", "httpuv", "isoband", "iterators", "jsonlite", "KFAS", "knitr", "labeling", "lamW", "lifecycle", "lme4", "lubridate", "magick", "MASS", "matrixStats", "mice", "mime", "missMDA", "mlbench", "MPV", "multcomp", "nnet", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgload", "PKI", "pracma", "processx", "progressr", "promises", "ps", "quantmod", "quantreg", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "Rdpack", "reprex", "rmarkdown", "robustbase", "rprojroot", "rstatix", "rstudioapi", "sampling", "shinyjqui", "smooth", "sp", "SparseM", "statmod", "svglite", "testthat", "tibble", "tinytex", "tseries", "tsibble", "vctrs", "withr", "xfun"))
install.packages(c("backports", "BH", "broom", "cachem", "callr", "caTools", "cli", "colorspace", "cowplot", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "digest", "distributional", "doParallel", "DT", "Epi", "fable", "fabletools", "FactoMineR", "Factoshiny", "fansi", "fastmap", "forcats", "foreach", "foreign", "generics", "ggplot2", "ggrepel", "ggsignif", "ggthemes", "glmnet", "greybox", "hms", "htmlwidgets", "httpuv", "isoband", "iterators", "jsonlite", "KFAS", "knitr", "labeling", "lamW", "lifecycle", "lme4", "lubridate", "magick", "MASS", "matrixStats", "mice", "mime", "missMDA", "mlbench", "MPV", "multcomp", "nnet", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgload", "PKI", "pracma", "processx", "progressr", "promises", "ps", "quantmod", "quantreg", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "Rdpack", "reprex", "rmarkdown", "robustbase", "rprojroot", "rstatix", "rstudioapi", "sampling", "shinyjqui", "smooth", "sp", "SparseM", "statmod", "svglite", "testthat", "tibble", "tinytex", "tseries", "tsibble", "vctrs", "withr", "xfun"))
#---------------------------------------------------------------------------------------#
#-------------------------COURS EXERCICE D'APPLICATION----------------------------------#
#---------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------#
t=1:10# création d'une série indicée
x=1/t
y=t
z=t*t
a=data.frame(cbind(x,y,z))
a
set.seed(300)
a <- fastICA(a, 3, alg.typ = "parallel", fun = "logcosh",
alpha = 1,method = "C", row.norm = FALSE, maxit = 200,
tol = 0.0001, verbose = TRUE)
#1. Téléchargement des librairies
library(lubridate)
library(data.table)
library(fastICA)
library(dplyr)
a <- fastICA(a, 3, alg.typ = "parallel", fun = "logcosh",
alpha = 1,method = "C", row.norm = FALSE, maxit = 200,
tol = 0.0001, verbose = TRUE)
a$A
a <- fastICA(a, 5, alg.typ = "parallel", fun = "logcosh",
alpha = 1,method = "C", row.norm = FALSE, maxit = 200,
tol = 0.0001, verbose = TRUE)
a <- fastICA(a, 3, alg.typ = "parallel", fun = "logcosh",
alpha = 1,method = "C", row.norm = FALSE, maxit = 200,
tol = 0.0001, verbose = TRUE)
a$A
a$S
a$S[,1]
A<-data.frame(a$S) #Création d'une dataframe
A
B<-cbind(t, A) #création d'une matrice B avec les dates
B
par(mfrow = c(1,3))
plot(X1~t, type="l", col="red", lwd=2, data=B)
plot(X2~t, type="l", col="yellow", lwd=2, data=B)
plot(X3~t, type="l", col="black", lwd=2, data=B)
B$C1=a$A[1,1]*a$S[,1]
B$C2=a$A[2,1]*a$S[,2]
B$C3=a$A[3,1]*a$S[,3]
par(mfrow = c(1,3))
par(mfrow = c(1,1))
par(mfrow = c(1,3))
plot(C1~t, type="l", col="red", lwd=2, data=B)
plot(C2~t, type="l", col="yellow", lwd=2, data=B)
plot(C3~t, type="l", col="black", lwd=2, data=B)
par(mfrow = c(1,1))
B$Z=B$C1+B$C2+B$C3
B$Z
B$A=mean(x)+B$Z
B$A
par(mfrow=c(1,2))
t=1:10
S1 <- sin(t)
plot(S1, type="l", main="cos(t)", col="red", lwd=2)
S2<-cos(t)
plot(S2, type="l", main = "sin(t)", col="yellow", lwd=2)
S=cbind(S1,S2)
set.seed(300)
a <- fastICA(S, 2, alg.typ = "parallel", fun = "logcosh",
alpha = 1,method = "C", row.norm = FALSE, maxit = 200,
tol = 0.0001, verbose = TRUE)
a$A
A<-data.frame(a$S)
B<-cbind(B,S)
par(mfrow = c(2,2))
plot(X1~t, type="l", col="red", lwd=2, data=B, main="composante 1")
plot(X2~t, type="l", col="yellow", lwd=2, data=B, main="composante 2")
plot(S1, type="l", main="cos(t)", col="red", lwd=2)
plot(S2, type="l", main = "sin(t)", col="yellow", lwd=2)
par(mfrow = c(1,1))
library(fastICA)
# Source matrix
S <- cbind(sin((1:1000)/20), rep((((1:200)-100)/100), 5))
# Mixing matrix
A <- matrix(c(0.291, 0.6557, -0.5439, 0.5572), 2, 2)
# plot graphs
par(mfcol = c(1, 2))
plot(1:1000, S[,1], type = "l",xlab = "S1", ylab = "")
plot(1:1000, S[,2], type = "l", xlab = "S2", ylab = "")
par(mfcol = c(1, 1))
View(S)
# Mixing matrix
A <- matrix(c(0.291, 0.6557, -0.5439, 0.5572), 2, 2)
View(A)
# Mixed two signals
X <- S %*% A
View(X)
par(mfcol = c(1, 2))
plot(1:1000, X[,1], type = "l",xlab = "X1", ylab = "")
plot(1:1000, X[,2], type = "l", xlab = "X2", ylab = "")
par(mfcol = c(1, 1))
# ICA for extracting independent sources from mixed signals
a <- fastICA(X, 2, alg.typ = "parallel", fun = "logcosh", alpha = 1,
method = "R", row.norm = FALSE, maxit = 200,
tol = 0.0001, verbose = TRUE)
library(shiny); runApp('Shiny_App/teey.R')
source('Shiny_App/teeee.R')
source('Shiny_App/teeee.R')
source('Shiny_App/teeee.R')
source('Shiny_App/teeee.R')
source('Shiny_App/teeee.R')
source('Shiny_App/teeee.R')
source('Shiny_App/teeee.R')
source('Shiny_App/teeee.R')
source('Shiny_App/teeee.R')
source('Shiny_App/teeee.R')
source('Shiny_App/teeee.R')
#**************************************************************************************************************************************************
#**************************************************************************************************************************************************
file1="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/base_bdd.csv"
base_bdd <- read.csv2(file1,header = T,encoding = 'UTF-8', sep = ",",row.names = 1,stringsAsFactors = FALSE,na.strings = c(""," ","NA","N/A"))
attach(base_bdd)
head(base_bdd)
#------------------------------------------------------------------------------------------------
# Sources de donnees
file1="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/OdonT1 812_2011-2017.csv"
file2="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/OdonT2 813_2011-2017.csv"
file4="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/OdonT4 815_2011-2017.csv"
file5="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/OdonT5 816_2011-2017.csv"
#I) Importations, Nettoyages et Validations des donnees
#************************************************************************************************
#                             Station OdonT1
#************************************************************************************************
OdonT1 <- read.csv2(file1,header = FALSE,encoding = 'UTF-8', sep = ",",stringsAsFactors = FALSE,na.strings = c(""," ","NA","N/A"))
attach(OdonT1)
OdonT1<-OdonT1[-1:-2,,]   #Suppression de lignes 1 et 2 dans les données
colnames(OdonT1)<-c("Indice","date","Heure","TempOd1")  #Renommer l'entête de la table
OdonT1
head(OdonT1)
head(OdonT1,save.image('tete'))
head(OdonT1,d<-save.image('tete'))
head(OdonT1)
file1="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/base_bdd.csv"
base_bdd <- read.csv2(file1,header = T,encoding = 'UTF-8', sep = ",",row.names = 1,stringsAsFactors = FALSE,na.strings = c(""," ","NA","N/A"))
attach(base_bdd)
head(base_bdd)
View(base_bdd)
View(base_bdd)
runApp('Shiny_App/gege.R')
runApp('Shiny_App/gege.R')
runApp('Shiny_App/gege.R')
runApp('Shiny_App/gege.R')
library(shiny); runApp('Web_Odon_Analytics.R')
######## 3°) Visualisation Odon ************************************************
library(leaflet)
library(dplyr)
# charger les donnees -------------------------------------------
file_coord="C:/Users/mamad/Dropbox/UE_Prorjet_Partag/base/coordonnees.csv"
cordonnes <- read.csv2(file_coord,header = T,encoding = 'UTF-8', sep = ",",stringsAsFactors = FALSE,na.strings = c(""," ","NA","N/A"))
attach(cordonnes)
#---------------------------------------------------------------
n <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng= -0.63738, lat= 49.02515, popup="Sonde Odon T2")
n  # Print the map
library(shiny); runApp('Shiny_App/teeye.R')
library(shiny); runApp('Web_Odon_Analytics.R')
library(shiny); runApp('Web_Odon_Analytics.R')
runApp('Web_Odon_Analytics.R')
runApp('Web_Odon_Analytics.R')
runApp('Web_Odon_Analytics.R')
runApp('Web_Odon_Analytics.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('~/Support_data/Depense/Expense_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
library(shiny); runApp('Web_Odon_Analytics_test.R')
runApp('~/Support_data/Depense/Expense_Analytics_test.R')
runApp('~/Support_data/Depense/Expense_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('~/Support_data/Depense/Expense_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('~/Support_data/Depense/Expense_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('~/Support_data/Depense/Expense_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('~/Support_data/Depense/Expense_Analytics_test.R')
runApp('~/Support_data/Depense/Expense_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('~/Support_data/Depense/Expense_Analytics_test.R')
runApp('~/Support_data/UE_Prorjet_Partag/Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
library(shiny); runApp('~/Support_data/Depense/ET_Analytics_test.R')
library(shiny); runApp('Web_Odon_Analytics_test.R')
library(shiny); runApp('Web_Odon_Analytics_test.R')
library(shiny); runApp('Web_Odon_Analytics_test.R')
runApp('~/Support_data/Depense/ET_Analytics_test.R')
runApp('~/Support_data/Depense/ET_Analytics_test.R')
runApp('~/Support_data/Depense/ET_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
runApp('Web_Odon_Analytics_test.R')
